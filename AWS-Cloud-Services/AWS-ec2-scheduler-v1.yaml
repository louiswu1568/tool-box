AWSTemplateFormatVersion: '2010-09-09'
Description: Automatically start and stop EC2 instance daily using Lambda and EventBridge

Parameters:
  InstanceId:
    Type: String
    Default: i-0be337ea1527b2ab0
    Description: EC2 instance ID to schedule start/stop

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaEC2StartStopRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2ControlPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  StartEC2Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: StartEC2Instance
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2', region_name='ap-northeast-1')
              instance_id = os.environ['INSTANCE_ID']
              ec2.start_instances(InstanceIds=[instance_id])
              return f"Started {instance_id}"
      Environment:
        Variables:
          INSTANCE_ID: !Ref InstanceId

  StopEC2Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: StopEC2Instance
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2', region_name='ap-northeast-1')
              instance_id = os.environ['INSTANCE_ID']
              ec2.stop_instances(InstanceIds=[instance_id])
              return f"Stopped {instance_id}"
      Environment:
        Variables:
          INSTANCE_ID: !Ref InstanceId

  StartScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StartEC2Schedule
      ScheduleExpression: cron(0 23 * * ? *)  # JST 08:00 = UTC 23:00
      State: ENABLED
      Targets:
        - Arn: !GetAtt StartEC2Function.Arn
          Id: StartEC2Target

  StopScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StopEC2Schedule
      ScheduleExpression: cron(0 14 * * ? *)  # JST 23:00 = UTC 14:00
      State: ENABLED
      Targets:
        - Arn: !GetAtt StopEC2Function.Arn
          Id: StopEC2Target

  PermissionForEventsToInvokeStartLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartEC2Function
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartScheduleRule.Arn

  PermissionForEventsToInvokeStopLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StopEC2Function
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopScheduleRule.Arn